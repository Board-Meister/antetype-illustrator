// Generated by dts-bundle-generator v9.5.1

import { IBaseDef, ICore, IParentDef, IStart, Layout, Module, Modules, ModulesEvent, XValue, YValue } from '@boardmeister/antetype-core';
import { Herald, ISubscriber, Subscriptions } from '@boardmeister/herald';
import { IInjectable } from '@boardmeister/marshal';
import { Minstrel } from '@boardmeister/minstrel';
import { StandardLonghandProperties } from 'csstype';

declare type LineJoin = "round" | "bevel" | "miter";
declare type FillStyle = any | boolean | CanvasGradient | CanvasPattern | string;
interface ILine {
	means: "line";
	args: {
		x: XValue;
		y: YValue;
	};
}
interface ICurve {
	means: "curve";
	args: {
		cp1x: XValue;
		cp1y: YValue;
		cp2x: XValue;
		cp2y: YValue;
		x: XValue;
		y: YValue;
	};
}
interface IStroke {
	means: "stroke";
	args: {
		thickness?: XValue;
		fill?: FillStyle;
		lineJoin?: LineJoin;
		miterLimit?: XValue;
	};
}
interface IBegin {
	means: "begin";
	args: {
		x: XValue;
		y: YValue;
	};
}
interface IMove {
	means: "move";
	args: {
		x: XValue;
		y: YValue;
	};
}
interface IClose {
	means: "close";
	args: object;
}
interface LeanerFillColor {
	offset: number;
	color: string;
}
interface LinearFillStyle {
	pos: {
		x: XValue;
		y: YValue;
	};
	size: {
		w: XValue;
		h: YValue;
	};
	colors: LeanerFillColor[];
}
interface IFillLinear {
	type: "linear";
	style: LinearFillStyle;
}
interface IFillDefault {
	type: "default";
	style: FillStyle;
}
type FillTypes = IFillLinear | IFillDefault;
interface IFill {
	means: "fill";
	args: FillTypes;
}
type PolygonActions = ILine | ICurve | IStroke | IBegin | IMove | IClose | IFill;
interface IPolygonArgs {
	steps: PolygonActions[];
	size: {
		negative: IStart;
		positive: IStart;
	};
}
export interface IPolygonDef<T = never> extends IBaseDef<T> {
	polygon: IPolygonArgs;
}
interface IImageCoords {
	xDiff: number;
	yDiff: number;
	width: number;
	height: number;
}
declare class CalculatedImage {
	image: HTMLImageElement;
	coords: IImageCoords;
	constructor(image: HTMLImageElement, coords: IImageCoords);
}
type ImageFit = "stretch" | "crop" | "default";
type ImageFitTo = "auto" | "height" | "width";
type VerticalAlignType = "top" | "bottom" | "center";
type HorizontalAlignType = "left" | "right" | "center";
interface IImageAlign {
	vertical: VerticalAlignType;
	horizontal: HorizontalAlignType;
}
interface IOutline {
	thickness: XValue;
	fill: FillTypes;
}
interface IOvercolor {
	fill: FillTypes;
}
interface IImageArg {
	calculated?: CalculatedImage | symbol;
	timeout?: number;
	fit?: ImageFit;
	overcolor?: IOvercolor;
	outline?: IOutline;
	align?: IImageAlign;
	fitTo?: ImageFitTo;
	src: string | HTMLImageElement;
}
export interface IImageDef<T = never> extends IBaseDef<T> {
	image: IImageArg;
}
declare type TextLines = {
	0: string;
	1: number;
}[];
declare type VerticalAlign = "center" | "top" | "bottom";
declare type HorizontalAlign = "center" | "left" | "right" | "justify";
interface ITextAlign {
	vertical?: VerticalAlign;
	horizontal?: HorizontalAlign;
}
interface ITextColumns {
	amount: number;
	gap: number;
}
interface ITextFont {
	style?: StandardLonghandProperties["fontStyle"];
	family?: StandardLonghandProperties["fontFamily"];
	weight?: StandardLonghandProperties["fontWeight"];
	size?: StandardLonghandProperties["fontSize"] | number;
	stretch?: StandardLonghandProperties["fontStretch"];
	variant?: StandardLonghandProperties["fontVariant"];
	height?: StandardLonghandProperties["lineHeight"];
}
interface ITextOutline {
	fill: FillTypes;
	thickness: XValue;
	lineJoin?: "round" | "bevel" | "miter";
	miterLimit?: number;
}
interface ITextArgs {
	value: string;
	align?: ITextAlign;
	columns?: ITextColumns;
	font?: ITextFont;
	spacing?: number;
	textBaseline?: "top" | "hanging" | "middle" | "alphabetic" | "ideographic" | "bottom";
	wrap?: boolean;
	lineHeight?: XValue;
	color?: FillStyle | FillTypes;
	outline?: ITextOutline;
	// Calculated do not set!
	transY?: number;
	lines?: TextLines;
}
export interface ITextDef extends IBaseDef {
	text: ITextArgs;
}
interface IGroupArgs {
	clip?: boolean;
	interaction?: "fixed" | "static";
	direction?: "row" | "column";
	wrap?: boolean;
	gap?: {
		vertical?: number;
		horizontal?: number;
	};
}
export interface IGroupDef extends IParentDef {
	group: IGroupArgs;
}
export interface IIllustrator extends Module {
	reset: () => void;
	clear: () => void;
	group: (def: IGroupDef) => void;
	polygon: (def: IPolygonDef) => void;
	image: (def: IImageDef) => void;
	text: (def: ITextDef) => void;
	calc: <T = Record<string, unknown>>(def: ICalcEvent) => Promise<T>;
	generateText: (value: string) => ITextDef;
	generateImage: (src: string | HTMLImageElement) => IImageDef;
	generatePolygon: (steps: PolygonActions[]) => IPolygonDef;
	generateGroup: (layout: Layout) => IGroupDef;
}
declare enum Event$1 {
	CALC = "antetype.illustrator.calc"
}
export interface ICalcEvent<T = Record<string, any>> {
	purpose: string;
	layerType: string;
	values: T;
}
export interface ModulesWithCore extends Modules {
	core: ICore;
	illustrator?: IIllustrator;
}
export interface IInjected extends Record<string, object> {
	minstrel: Minstrel;
	herald: Herald;
}
/**
 * The main piece of the tool - the drawing script.
 * Currently, supports:
 * - groups
 * - images
 * - polygons
 * - text
 * - clearing mechanism
 */
export declare class AntetypeIllustrator {
	#private;
	static inject: Record<string, string>;
	inject(injections: IInjected): void;
	register(event: CustomEvent<ModulesEvent>): Promise<void>;
	static subscriptions: Subscriptions;
}
declare const EnAntetypeIllustrator: IInjectable<IInjected> & ISubscriber;

export {
	EnAntetypeIllustrator as default,
	Event$1 as Event,
};

export {};
